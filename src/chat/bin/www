#!/usr/bin/env node


const config = require('../../hunmin-config');
const path = require('path');
/**
 * Module dependencies.
 */


var app = require('../app');
var debug = require('debug')('chat:server');
var http = require('http');
const webSocket = require('../module/socket').startPubSub;



/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create redis-pubsub structure
 */

let redis = require('redis');
const redisConfig = require(path.join(config.CONFIG_PATH, "redis.json"))[config.NODE_ENV];

// let pub = redis.createClient(redisConfig);
// let sub = redis.createClient(redisConfig);
//
// sub.subscribe('sub');
// sub.on("subscribe", function(channel, count) {
//   console.log("Subscribed to " + channel + ". Now subscribed to " + count + " channel(s).");
// });

/**
 * Create HTTP server.
 * and then make socket server
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
var chat = io.of('/chat');
var alarm = io.of('/alarm');
var friend = io.of('/friend');
var sockets = {
  io: io,
  chat: chat,
  alarm: alarm,
  friend: friend,
};
webSocket(server, sockets);


/**
 * Listen on provided port, on all network interfaces.
 */

//server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Database connection - MongoDB
 */

var mongoose = require('mongoose');
const mongooseConfig = require(path.join(config.CONFIG_PATH, "mongo.json"))[config.NODE_ENV];


let db = mongoose.connection;
db.on('error', console.error);
db.once('open', function(){
  console.log("Connected to mongod server");
});

mongoose.connect(mongooseConfig.mongooseURL , {useUnifiedTopology: true , useNewUrlParser: true });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

module.exports = {
  sockets: sockets
};